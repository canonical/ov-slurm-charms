[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = fmt, lint, version, readme, all, unit

[vars]
slurmctld_src = {toxinidir}/charm-slurmctld/src/
slurmd_src = {toxinidir}/charm-slurmd/src/
slurmdbd_src = {toxinidir}/charm-slurmdbd/src/
slurmrestd_src = {toxinidir}/charm-slurmrestd/src/
tst_path = {toxinidir}/tests/
all_path = {[vars]slurmctld_src} {[vars]slurmd_src} {[vars]slurmdbd_src} {[vars]slurmrestd_src} {[vars]tst_path}

[testenv]
basepython = python3
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONBREAKPOINT=pdb.set_trace
    PY_COLORS=1
passenv =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
allowlist_externals =
    /snap/bin/charmcraft
    /usr/bin/bash
    /usr/bin/cp
    /usr/bin/rm
    /usr/bin/sed

[testenv:fmt]
description = Apply coding style standards to code.
deps =
    black
    ruff
commands =
    ruff --fix {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards.
deps =
    black
    ruff
    codespell
commands =
    codespell {toxinidir} \
        --skip {toxinidir}/.git \
        --skip {toxinidir}/.tox \
        --skip {toxinidir}/build \
        --skip {toxinidir}/lib \
        --skip {toxinidir}/venv \
        --skip {toxinidir}/.mypy_cache \
        --skip {toxinidir}/icon.svg

    ruff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests.
deps =
    -r{toxinidir}/requirements.txt
    pytest
    coverage[toml]
commands =
    coverage run --source={[vars]slurmctld_src},{[vars]slurmd_src},{[vars]slurmdbd_src},{[vars]slurmrestd_src} \
        -m pytest \
        --ignore={[vars]tst_path}integration \
        --tb native \
        -v \
        -s \
        {posargs}
    coverage report

[testenv:integration]
description = Run integration tests.
deps =
    -r{toxinidir}/requirements.txt
    juju
    pytest
    pytest-operator
    tenacity
    requests
commands =
    pytest -v \
        -s \
        --tb native \
        --ignore={[vars]tst_path}unit \
        --log-cli-level=INFO \
        {posargs}

[testenv:{test-centos,test-focal,test-all}]
description = Run tests on built charms.
commands =
    test-centos: {toxinidir}/run_tests centos
    test-focal: {toxinidir}/run_tests focal
    test-all: {toxinidir}/run_tests centos
    test-all: {toxinidir}/run_tests focal

[testenv:version]
description = Create or update version file.
commands =
    bash -c "git describe --tags --always > version"

[testenv:readme]
description = Create each slurm charms README file.
commands =
    bash -c "cp README.md {toxinidir}/charm-slurm*/README.md"
    sed -i -e "s|Welcome to the Omnivector Slurm Distribution!|slurmctld charm|g" {toxinidir}/charm-slurmctld/README.md
    sed -i -e "s|Welcome to the Omnivector Slurm Distribution!|slurmd charm|g" {toxinidir}/charm-slurmd/README.md
    sed -i -e "s|Welcome to the Omnivector Slurm Distribution!|slurmdbd charm|g" {toxinidir}/charm-slurmdbd/README.md
    sed -i -e "s|Welcome to the Omnivector Slurm Distribution!|slurmrestd charm|g" {toxinidir}/charm-slurmrestd/README.md

[testenv:{slurmctld,slurmd,slurmdbd,slurmrestd}]
description = Pack individual slurm charm.
commands =
    slurmctld: cp version LICENSE icon.svg {toxinidir}/charm-slurmctld
    slurmctld: charmcraft pack --project-dir {toxinidir}/charm-slurmctld {posargs}
    slurmctld: bash -c "cp slurmctld_*.charm slurmctld.charm"
    slurmd: cp version LICENSE icon.svg {toxinidir}/charm-slurmd
    slurmd: charmcraft pack --project-dir {toxinidir}/charm-slurmd {posargs}
    slurmd: bash -c "cp slurmd_*.charm slurmd.charm"
    slurmdbd: cp version LICENSE icon.svg {toxinidir}/charm-slurmdbd
    slurmdbd: charmcraft pack --project-dir {toxinidir}/charm-slurmdbd {posargs}
    slurmdbd: bash -c "cp slurmdbd_*.charm slurmdbd.charm"
    slurmrestd: cp version LICENSE icon.svg {toxinidir}/charm-slurmrestd
    slurmrestd: charmcraft pack --project-dir {toxinidir}/charm-slurmrestd {posargs}
    slurmrestd: bash -c "cp slurmrestd_*.charm slurmrestd.charm"

[testenv:all]
description = Pack all slurm charms at once.
commands =
    cp version LICENSE icon.svg {toxinidir}/charm-slurmctld
    cp version LICENSE icon.svg {toxinidir}/charm-slurmd
    cp version LICENSE icon.svg {toxinidir}/charm-slurmdbd
    cp version LICENSE icon.svg {toxinidir}/charm-slurmrestd
    charmcraft pack --project-dir {toxinidir}/charm-slurmctld {posargs}
    charmcraft pack --project-dir {toxinidir}/charm-slurmd {posargs}
    charmcraft pack --project-dir {toxinidir}/charm-slurmdbd {posargs}
    charmcraft pack --project-dir {toxinidir}/charm-slurmrestd {posargs}
    bash -c "cp slurmctld_*.charm slurmctld.charm"
    bash -c "cp slurmd_*.charm slurmd.charm"
    bash -c "cp slurmdbd_*.charm slurmdbd.charm"
    bash -c "cp slurmrestd_*.charm slurmrestd.charm"

[testenv:release]
description = Create new release of slurm charms.
commands =
    bash {toxinidir}/scripts/release.sh {posargs}

[testenv:clean]
description = Clean up slurm charm LXD build environments.
commands =
    charmcraft clean --project-dir {toxinidir}/charm-slurmctld
    charmcraft clean --project-dir {toxinidir}/charm-slurmd
    charmcraft clean --project-dir {toxinidir}/charm-slurmdbd
    charmcraft clean --project-dir {toxinidir}/charm-slurmrestd

[testenv:deep-clean]
description = Clean up slurm charm repository.
commands =
    rm -rf venv/
    rm -rf node_modules/
    bash -c "find {toxinidir} -name '*.charm' -delete"
    bash -c "rm -rf {toxinidir}/charm-slurm*/build"
    bash -c "rm -rf {toxinidir}/charm-slurm*/version"
    bash -c "rm -rf {toxinidir}/charm-slurm*/README.md"
    rm -rf .tox/
